import{CORE_URL,FFMessageType}from"./const.js";import{ERROR_UNKNOWN_MESSAGE_TYPE,ERROR_NOT_LOADED,ERROR_IMPORT_FAILURE}from"./errors.js";let ffmpeg;const load=async({coreURL:e,wasmURL:s,workerURL:a})=>{const t=!ffmpeg;try{e||(e=CORE_URL),importScripts(e)}catch{if(e||(e=CORE_URL.replace("/umd/","/esm/")),self.createFFmpegCore=(await import(e)).default,!self.createFFmpegCore)throw ERROR_IMPORT_FAILURE}const r=e,p=s||e.replace(/.js$/g,".wasm"),f=a||e.replace(/.js$/g,".worker.js");return ffmpeg=await self.createFFmpegCore({mainScriptUrlOrBlob:`${r}#${btoa(JSON.stringify({wasmURL:p,workerURL:f}))}`}),ffmpeg.setLogger((e=>self.postMessage({type:FFMessageType.LOG,data:e}))),ffmpeg.setProgress((e=>self.postMessage({type:FFMessageType.PROGRESS,data:e}))),t},exec=({args:e,timeout:s=-1})=>{ffmpeg.setTimeout(s),ffmpeg.exec(...e);const a=ffmpeg.ret;return ffmpeg.reset(),a},writeFile=({path:e,data:s})=>(ffmpeg.FS.writeFile(e,s),!0),readFile=({path:e,encoding:s})=>ffmpeg.FS.readFile(e,{encoding:s}),deleteFile=({path:e})=>(ffmpeg.FS.unlink(e),!0),rename=({oldPath:e,newPath:s})=>(ffmpeg.FS.rename(e,s),!0),createDir=({path:e})=>(ffmpeg.FS.mkdir(e),!0),listDir=({path:e})=>{const s=ffmpeg.FS.readdir(e),a=[];for(const t of s){const s=ffmpeg.FS.stat(`${e}/${t}`),r=ffmpeg.FS.isDir(s.mode);a.push({name:t,isDir:r})}return a},deleteDir=({path:e})=>(ffmpeg.FS.rmdir(e),!0),mount=({fsType:e,options:s,mountPoint:a})=>{const t=e,r=ffmpeg.FS.filesystems[t];return!!r&&(ffmpeg.FS.mount(r,s,a),!0)},unmount=({mountPoint:e})=>(ffmpeg.FS.unmount(e),!0);self.onmessage=async({data:{id:e,type:s,data:a}})=>{const t=[];let r;try{if(s!==FFMessageType.LOAD&&!ffmpeg)throw ERROR_NOT_LOADED;switch(s){case FFMessageType.LOAD:r=await load(a);break;case FFMessageType.EXEC:r=exec(a);break;case FFMessageType.WRITE_FILE:r=writeFile(a);break;case FFMessageType.READ_FILE:r=readFile(a);break;case FFMessageType.DELETE_FILE:r=deleteFile(a);break;case FFMessageType.RENAME:r=rename(a);break;case FFMessageType.CREATE_DIR:r=createDir(a);break;case FFMessageType.LIST_DIR:r=listDir(a);break;case FFMessageType.DELETE_DIR:r=deleteDir(a);break;case FFMessageType.MOUNT:r=mount(a);break;case FFMessageType.UNMOUNT:r=unmount(a);break;default:throw ERROR_UNKNOWN_MESSAGE_TYPE}}catch(s){return void self.postMessage({id:e,type:FFMessageType.ERROR,data:s.toString()})}r instanceof Uint8Array&&t.push(r.buffer),self.postMessage({id:e,type:s,data:r},t)};